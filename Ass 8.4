1.Explain the difference between FIFO and Capacity scheduler?
     FIFO:
         *The FIFO Scheduler places applications in a queue and runs them in the order of submission (first in, first out). 
         *Requests for the first application in the queue are allocated first; once its requests have been satisfied, 
           the next application in the queue is served, and so on.
         *The FIFO Scheduler has the merit of being simple to understand and not needing any configuration, 
           but it’s not suitable for shared clusters.
         *Large applications will use all the resources in a cluster, so each application has to wait its turn. 
           On a shared cluster, it is better to use the Capacity Scheduler or the Fair Scheduler.   
 
    CAPACITY SCHEDULER:
         *With the Capacity Scheduler, a separate dedicated queue allows the small job to start as soon as it is submitted.
         *This is at the cost of overall cluster utilization since the queue capacity is reserved for jobs in that queue.
         *If queues are not designed or used properly, some queues may be overloaded while some may be underutilised.
         *Large job finishes late when compared with using the FIFO Scheduler.
     
     
     
2.Explain the difference between FIFO and Fair scheduler ?
     FIFO :
         *The FIFO Scheduler places applications in a queue and runs them in the order of submission (first in, first out). 
         *Requests for the first application in the queue are allocated first; once its requests have been satisfied, 
           the next application in the queue is served, and so on.
         *The FIFO Scheduler has the merit of being simple to understand and not needing any configuration, 
           but it’s not suitable for shared clusters.
         *Large applications will use all the resources in a cluster, so each application has to wait its turn. 
           On a shared cluster, it is better to use the Capacity Scheduler or the Fair Scheduler.   
           
     FAIR SCHEDULER:
         *With the Fair Scheduler, there is no need to reserve a set amount of capacity,
           since it will dynamically balance resources between all running jobs. 
         *Just after the first (large) job starts, it is the only job running, so it gets all the resources in the cluster.
         *When the second (small) job starts, it is allocated half of the cluster resources, 
           so that each job is using its fair share of resources.
         *After the small job completes and no longer requires resources, the large job goes back to using the 
           full cluster capacity again. 
         * The overall effect is both high cluster utilization and timely small job completion.
         
         
    
3. Explain the difference between Capacity and Fair scheduler ?
    
     CAPACITY SCHEDULER:
         *With the Capacity Scheduler, a separate dedicated queue allows the small job to start as soon as it is submitted.
         *This is at the cost of overall cluster utilization since the queue capacity is reserved for jobs in that queue.
         *If queues are not designed or used properly, some queues may be overloaded while some may be underutilised.
         *Large job finishes late when compared with using the FIFO Scheduler.
         
         
    FAIR SCHEDULER:
         *With the Fair Scheduler, there is no need to reserve a set amount of capacity,
           since it will dynamically balance resources between all running jobs. 
         *Just after the first (large) job starts, it is the only job running, so it gets all the resources in the cluster.
         *When the second (small) job starts, it is allocated half of the cluster resources, 
           so that each job is using its fair share of resources.
         *After the small job completes and no longer requires resources, the large job goes back to using the 
           full cluster capacity again. 
         * The overall effect is both high cluster utilization and timely small job completion.
         
   
4) What are the limitations of hadoop 1.x and how they were overcome in hadoop 2.x

      *Hadoop 1.x supports only one namespace for managing HDFS filesystem whereas Hadoop 2.x supports multiple namespaces.
      *Hadoop 1.x supports only Map Reduce whereas Hadoop 2.x suppports YARN component like Map Reduce,Stark,Storm etc.
      *Scalablity is improved in hadoop 2.x 
      *hadoop 2.x has multi tenance support where hadoop 1.x doesn't have it.
      *Hadoop 1.x uses fixed size blocks for storage purposes whereas hadoop 2.x uses containers for storage purposes.
      *Hadoop 1.x supports 4000 nodes per cluster where hadoop 2.x supports 10000 nodes per cluster.
      *Name node is not a single point of failure in hadoop 2.x
      *Multiple name node servers manages multiple namespaces.
      *Hadoop 2.x support MS Windows unlike hadoop 1.x.
      
   
